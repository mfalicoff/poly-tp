options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< STRING: "string"> |
	< INT: "int"> |
	< FLOAT: "float" > |
	< BOOL: "bool"> |
	< PRINT: "print" > |
	< INPUT: "input" > |
	< IN: "in" > |
	< DO: "do" > |
	< WHILE: "while" > |
	< SWITCH: "switch" > |
	< CASE: "case" > |
    < DEF: "default">|
    < FOR: "for"> |
    < FUNC: "func"> |
    < RET: "return">
	// À compléter au besoin
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" >
	// À compléter au besoin
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (<DIGIT>)* | "0" > |
    <REAL:
        (<INTEGER> | "0")? ["."] (<INTEGER>)? (("e"|"E") <PLUS> <INTEGER>)?
    >
}

//
// SYNTAX ANALYSIS
//

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() #void : { }
{
	 ( Stmt() )*
}

void Stmt() #void : { }
{
	(AssignStmt() <SEMICOLON>) | WhileStmt() | DoWhileStmt() | IfStmt() | ForStmt() | FunctionStmt()
}

void AssignStmt() : { Token t;}
{
	Identifier() <ASSIGN> LogicExpr()
}

void WhileStmt() : { Token t;}
{
    <WHILE>  <LPAREN> LogicExpr()#WhileCond <RPAREN> BlockExpr()#WhileBlock
}

void DoWhileStmt() : {}
{
    <DO> BlockExpr()#WhileBlock <WHILE> ParenExpr()#WhileCond <SEMICOLON>
}

void IfStmt() : {}
{
    <IF>  <LPAREN> LogicExpr()#IfCond <RPAREN> BlockExpr()#IfBlock(true) (LOOKAHEAD(2) ElseIfStmt())* (LOOKAHEAD(2) ElseBlock())?
}

void ElseBlock(): {}
{
    <ELSE> (Stmt() | (<LACC> Block() (ReturnStmt())?<RACC>))
}

void ElseIf()#ElseBlock: {}
{
    IfStmt()
}

void ElseIfStmt() #void: {}
{
    <ELSE> ElseIf()
}

void ForStmt() : {}
{
    <FOR> <LPAREN> (AssignStmt())? <SEMICOLON> (LogicExpr())? <SEMICOLON> (AssignStmt())? <RPAREN> (Stmt() | (<LACC> Block() (ReturnStmt())? <RACC>))
}

void ReturnStmt() : { }
{
    <RET> (LogicExpr())? <SEMICOLON>
}

void FunctionStmt() : {}
{
    <FUNC> Identifier() <LPAREN> (Identifier() | <COMMA> Identifier())* <RPAREN> <LACC>  (Stmt())* (ReturnStmt())? <RACC>
}

void ParenExpr() #void : {}
{
    <LPAREN> LogicExpr() <RPAREN> |
    BasicExpr()
}

void BasicExpr() #void : {}
{
	Identifier() |
	IntValue() |
	RealValue()
}

void BlockExpr() #void : { }
{
    <LACC> Block() (ReturnStmt())? <RACC> | Stmt()
}

void LogicExpr() #Logic(>1) : {}
{
    CompareExpr() (<LOGIC> CompareExpr())*
}

void CompareExpr() #Compare(>1) : {}
{
    AddExpr() (<COMPARE> AddExpr())*
}

void AddExpr() #Addition(>1) : {}
{
    MulExpr() ((<PLUS> | <MINUS>) MulExpr())*
}

void MulExpr() #Multi(>1) : {}
{
    NegExpr() ((<FOIS> | <DIV>) NegExpr())*
}

void NegExpr() #void : {}
{
    <MINUS> NegExpr() #Minus | NotExpr()
}

void NotExpr() #void : {}
{
    <NOT> NotExpr() #Not | ParenExpr()
}

void Identifier() : { Token t;}
{
	t = <IDENTIFIER> {jjtThis.setValue(t.image);}
}

void IntValue() : { Token t;}
{
	t = <INTEGER> {jjtThis.setValue(Integer.parseInt(t.image));}
}

void RealValue() : { Token t;}
{
	t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}