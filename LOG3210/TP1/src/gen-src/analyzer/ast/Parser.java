/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package analyzer.ast;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
        {
                Parser c = new Parser(input);
                return c.Program();
        }

//
// SYNTAX ANALYSIS
//
  final public 
ASTProgram Program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Block();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
}

  final public void Block() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case DO:
      case WHILE:
      case FOR:
      case FUNC:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Stmt();
    }
}

  final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      AssignStmt();
      jj_consume_token(SEMICOLON);
      break;
      }
    case WHILE:{
      WhileStmt();
      break;
      }
    case DO:{
      DoWhileStmt();
      break;
      }
    case IF:{
      IfStmt();
      break;
      }
    case FOR:{
      ForStmt();
      break;
      }
    case FUNC:{
      FunctionStmt();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void AssignStmt() throws ParseException {/*@bgen(jjtree) AssignStmt */
                      ASTAssignStmt jjtn000 = new ASTAssignStmt(JJTASSIGNSTMT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      Identifier();
      jj_consume_token(ASSIGN);
      LogicExpr();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void WhileStmt() throws ParseException {/*@bgen(jjtree) WhileStmt */
                     ASTWhileStmt jjtn000 = new ASTWhileStmt(JJTWHILESTMT);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
ASTWhileCond jjtn001 = new ASTWhileCond(JJTWHILECOND);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
        LogicExpr();
      } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
      }
      jj_consume_token(RPAREN);
ASTWhileBlock jjtn002 = new ASTWhileBlock(JJTWHILEBLOCK);
                                                       boolean jjtc002 = true;
                                                       jjtree.openNodeScope(jjtn002);
      try {
        BlockExpr();
      } catch (Throwable jjte002) {
if (jjtc002) {
                                                         jjtree.clearNodeScope(jjtn002);
                                                         jjtc002 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte002 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte002;}
                                                       }
                                                       if (jjte002 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte002;}
                                                       }
                                                       {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                                         jjtree.closeNodeScope(jjtn002, true);
                                                       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void DoWhileStmt() throws ParseException {/*@bgen(jjtree) DoWhileStmt */
  ASTDoWhileStmt jjtn000 = new ASTDoWhileStmt(JJTDOWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
ASTWhileBlock jjtn001 = new ASTWhileBlock(JJTWHILEBLOCK);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        BlockExpr();
      } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
      }
      jj_consume_token(WHILE);
ASTWhileCond jjtn002 = new ASTWhileCond(JJTWHILECOND);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
      try {
        ParenExpr();
      } catch (Throwable jjte002) {
if (jjtc002) {
                                            jjtree.clearNodeScope(jjtn002);
                                            jjtc002 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte002 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte002;}
                                          }
                                          if (jjte002 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte002;}
                                          }
                                          {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002, true);
                                          }
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void IfStmt() throws ParseException {/*@bgen(jjtree) IfStmt */
  ASTIfStmt jjtn000 = new ASTIfStmt(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
ASTIfCond jjtn001 = new ASTIfCond(JJTIFCOND);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
        LogicExpr();
      } catch (Throwable jjte001) {
if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
      }
      jj_consume_token(RPAREN);
ASTIfBlock jjtn002 = new ASTIfBlock(JJTIFBLOCK);
                                                 boolean jjtc002 = true;
                                                 jjtree.openNodeScope(jjtn002);
      try {
        BlockExpr();
      } catch (Throwable jjte002) {
if (jjtc002) {
                                                   jjtree.clearNodeScope(jjtn002);
                                                   jjtc002 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte002 instanceof RuntimeException) {
                                                   {if (true) throw (RuntimeException)jjte002;}
                                                 }
                                                 if (jjte002 instanceof ParseException) {
                                                   {if (true) throw (ParseException)jjte002;}
                                                 }
                                                 {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                 }
      }
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        ElseIfStmt();
      }
      if (jj_2_2(2)) {
        ElseBlock();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void ElseBlock() throws ParseException {/*@bgen(jjtree) ElseBlock */
  ASTElseBlock jjtn000 = new ASTElseBlock(JJTELSEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case DO:
      case WHILE:
      case FOR:
      case FUNC:
      case IDENTIFIER:{
        Stmt();
        break;
        }
      case LACC:{
        jj_consume_token(LACC);
        Block();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RET:{
          ReturnStmt();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(RACC);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void ElseIf() throws ParseException {/*@bgen(jjtree) ElseBlock */
  ASTElseBlock jjtn000 = new ASTElseBlock(JJTELSEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IfStmt();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void ElseIfStmt() throws ParseException {
    jj_consume_token(ELSE);
    ElseIf();
}

  final public void ForStmt() throws ParseException {/*@bgen(jjtree) ForStmt */
  ASTForStmt jjtn000 = new ASTForStmt(JJTFORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        AssignStmt();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case NOT:
      case LPAREN:
      case IDENTIFIER:
      case INTEGER:
      case REAL:{
        LogicExpr();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        AssignStmt();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case DO:
      case WHILE:
      case FOR:
      case FUNC:
      case IDENTIFIER:{
        Stmt();
        break;
        }
      case LACC:{
        jj_consume_token(LACC);
        Block();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RET:{
          ReturnStmt();
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(RACC);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void ReturnStmt() throws ParseException {/*@bgen(jjtree) ReturnStmt */
  ASTReturnStmt jjtn000 = new ASTReturnStmt(JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case NOT:
      case LPAREN:
      case IDENTIFIER:
      case INTEGER:
      case REAL:{
        LogicExpr();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void FunctionStmt() throws ParseException {/*@bgen(jjtree) FunctionStmt */
  ASTFunctionStmt jjtn000 = new ASTFunctionStmt(JJTFUNCTIONSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNC);
      Identifier();
      jj_consume_token(LPAREN);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          Identifier();
          break;
          }
        case COMMA:{
          jj_consume_token(COMMA);
          Identifier();
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      jj_consume_token(LACC);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case DO:
        case WHILE:
        case FOR:
        case FUNC:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        Stmt();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RET:{
        ReturnStmt();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(RACC);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void ParenExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      LogicExpr();
      jj_consume_token(RPAREN);
      break;
      }
    case IDENTIFIER:
    case INTEGER:
    case REAL:{
      BasicExpr();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void BasicExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      Identifier();
      break;
      }
    case INTEGER:{
      IntValue();
      break;
      }
    case REAL:{
      RealValue();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void BlockExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LACC:{
      jj_consume_token(LACC);
      Block();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RET:{
        ReturnStmt();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(RACC);
      break;
      }
    case IF:
    case DO:
    case WHILE:
    case FOR:
    case FUNC:
    case IDENTIFIER:{
      Stmt();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void LogicExpr() throws ParseException {/*@bgen(jjtree) #Logic(> 1) */
  ASTLogic jjtn000 = new ASTLogic(JJTLOGIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CompareExpr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOGIC:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_5;
        }
        jj_consume_token(LOGIC);
        CompareExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
}

  final public void CompareExpr() throws ParseException {/*@bgen(jjtree) #Compare(> 1) */
  ASTCompare jjtn000 = new ASTCompare(JJTCOMPARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AddExpr();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMPARE:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMPARE);
        AddExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
}

  final public void AddExpr() throws ParseException {/*@bgen(jjtree) #Addition(> 1) */
  ASTAddition jjtn000 = new ASTAddition(JJTADDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MulExpr();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MulExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
}

  final public void MulExpr() throws ParseException {/*@bgen(jjtree) #Multi(> 1) */
  ASTMulti jjtn000 = new ASTMulti(JJTMULTI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NegExpr();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FOIS:
        case DIV:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FOIS:{
          jj_consume_token(FOIS);
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        NegExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
}

  final public void NegExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      jj_consume_token(MINUS);
ASTMinus jjtn001 = new ASTMinus(JJTMINUS);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        NegExpr();
      } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      break;
      }
    case NOT:
    case LPAREN:
    case IDENTIFIER:
    case INTEGER:
    case REAL:{
      NotExpr();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void NotExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
ASTNot jjtn001 = new ASTNot(JJTNOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        NotExpr();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      break;
      }
    case LPAREN:
    case IDENTIFIER:
    case INTEGER:
    case REAL:{
      ParenExpr();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
                      ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.setValue(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void IntValue() throws ParseException {/*@bgen(jjtree) IntValue */
                    ASTIntValue jjtn000 = new ASTIntValue(JJTINTVALUE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.setValue(Integer.parseInt(t.image));
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void RealValue() throws ParseException {/*@bgen(jjtree) RealValue */
                     ASTRealValue jjtn000 = new ASTRealValue(JJTREALVALUE);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(REAL);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setValue(Double.parseDouble(t.image));
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(FUNC)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(LACC)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x18c0200,0x18c0200,0x2000000,0x18c0200,0x0,0x0,0x0,0x2000000,0x18c0200,0x0,0x0,0x0,0x18c0200,0x2000000,0x0,0x0,0x2000000,0x18c0200,0x10000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x40000,0x40000,0x0,0x40800,0x40000,0x640290,0x40000,0x0,0x40800,0x640290,0x48000,0x48000,0x40000,0x0,0x640200,0x640000,0x0,0x40800,0x0,0x0,0x18,0x18,0x60,0x60,0x640290,0x640280,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[55];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 26; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 55; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
