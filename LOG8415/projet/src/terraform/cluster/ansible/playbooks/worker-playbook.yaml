- hosts: aws_ec2_workers
  become: yes
  vars:
    manager_ip: "{{ hostvars['aws_ec2_manager1']['aws_ec2_manager1_private'] }}"
    worker_one: "{{ hostvars['aws_ec2_worker1']['aws_ec2_worker1_private'] }}"
    worker_two: "{{ hostvars['aws_ec2_worker2']['aws_ec2_worker2_private'] }}"
    worker_three: "{{ hostvars['aws_ec2_worker3']['aws_ec2_worker3_private'] }}"

  tasks:

    - name: Update and upgrade packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - libncurses5
        - libclass-methodmaker-perl
        - sysbench
        - python3-pymysql

    - name: Create shared directory
      file:
        path: /home/shared
        state: directory

    - name: Make shared directory available to all users
      file:
        path: /home/shared
        mode: '0777'
        recurse: yes

    - name: Download MySQL Cluster Management Server
      command: "wget https://dev.mysql.com/get/Downloads/MySQL-Cluster-7.6/mysql-cluster-community-data-node_7.6.6-1ubuntu18.04_amd64.deb -P /home/shared/"

    - name: Install MySQL Cluster Management Server
      apt:
        deb: "/home/shared/mysql-cluster-community-data-node_7.6.6-1ubuntu18.04_amd64.deb"
      become: true

    - name: Create Data notes configuration
      command: "touch /etc/my.cnf"
      become: true

    - name: Configure Data notes
      blockinfile:
        path: "/etc/my.cnf"
        content: |
         [mysql_cluster]
          # Options for NDB Cluster processes:
          ndb-connectstring={{ manager_ip }}  # location of cluster manager
          
    - name: Create node data directory
      file:
        path: /usr/local/mysql/data
        state: directory

    - name: Kill the manager before starting it as a service
      shell: "pkill -f ndb_mgmd"
      ignore_errors: yes

    - name: Setup ndb_mgmd service
      copy:
        content: |
          [Unit]
          Description=MySQL NDB Data Node Daemon
          After=network.target auditd.service
          
          [Service]
          Type=forking
          ExecStart=/usr/sbin/ndbd
          ExecReload=/bin/kill -HUP \$MAINPID
          KillMode=process
          Restart=on-failure
          
          [Install]
          WantedBy=multi-user.target
        dest: "/etc/systemd/system/ndb_mgmd.service"


    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start ndb_mgmd service
      service:
        name: ndb_mgmd
        enabled: yes
        state: started
      retries: 3
      delay: 5
